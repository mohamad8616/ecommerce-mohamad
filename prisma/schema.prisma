// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// Alternative schema with separate tables

model FakeProduct {
  id          Int      @id @default(autoincrement())
  externalId  Int?     // ID from the external API
  title       String
  price       Float
  description String
  category    String
  image       String
  rating      Float?
  rate        Float?
  count       Int?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("fake_products")
}

model DummyProduct {
  id                    Int      @id @default(autoincrement())
  externalId            Int?     // ID from the external API
  title                 String
  description           String
  category              String
  price                 Float
  discountPercentage    Float?
  rating                Float?
  stock                 Int?
  tags                  String[]
  brand                 String?
  sku                   String?   @unique
  weight                Float?
  warrantyInformation   String?
  shippingInformation   String?
  availabilityStatus    String?
  returnPolicy          String?
  minimumOrderQuantity  Int?
  images                String[]
  thumbnail             String?
  
  // Dimensions
  width   Float?
  height  Float?
  depth   Float?
  
  // Meta
  barcode    String?
  qrCode     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  reviews DummyReview[]
  
  @@map("dummy_products")
}

model DummyReview {
  id             Int      @id @default(autoincrement())
  rating         Float
  comment        String
  date           DateTime
  reviewerName   String
  reviewerEmail  String
  productId      Int
  
  product        DummyProduct  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("dummy_reviews")
}